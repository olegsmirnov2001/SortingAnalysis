//{///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////¡»¡À»Œ“≈ ¿ —Ã»–ÕŒ¬¿ ŒÀ≈√¿////////////////////////////////////////////////////////////
//}///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//{///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////// À¿——€////////////////////////////////////////////////////////////////////
//}///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class vect_t
    {
    double x, y;

    vect_t () :
        x (0),
        y (0)
        {}

    vect_t (double Ax, double Ay) :
        x (Ax),
        y (Ay)
        {}

    vect_t (vect_t A) :
        x (A.x),
        y (A.y)
        {}

    vect_t& operator + (vect_t vect)
        {
        return vect_t (x + vect.x, y + vect.y);
        }

    vect_t& operator += (vect_t vect)
        {
        x += vect.x;
        y += vect.y;

        return this;
        }

    vect_t& operator - (vect_t vect)
        {
        return vect_t (x - vect.x, y - vect.y);
        }

    vect_t& operator -= (vect_t vect)
        {
        x -= vect.x;
        y -= vect.y;

        return this;
        }

    vect_t& operator * (double k)
        {
        return vect_t (x * k, y * k);
        }

    vect_t& operator *= (double k)
        {
        x *= k;
        y *= k;

        return this;
        }

    vect_t& operator / (double k)
        {
        return vect_t (x / k, y / k);
        }

    vect_t& operator /= (double k)
        {
        x /= k;
        y /= k;

        return this;
        }
    };

class rect_t
    {
    double x1, x2, y1, x2;

    rect_t () :
        x1 (0),
        y1 (0),
        x2 (0),
        y2 (0)
        {}

    rect_t (Ax1, Ax2, Ay1, Ay2) :
        x1 (Ax1),
        y1 (Ay1),
        x2 (Ax2),
        y2 (Ay2)
        {}

    rect_t (rect_t rect) :
        x1 (rect.x1),
        y1 (rect.y1),
        x2 (rect.x2),
        y2 (rect.y2)
        {}

    rect_t& operator + (double x, double y)
        {
        return rect_t (x1 + x, y1 + y, x2 + x, y2 + x);
        }

    rect_t& operator - (double x, double y)
        {
        return rect_t (x1 - x, y1 - y, x2 - x, y2 - x);
        }
    }

//{///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////// ŒÕ—“¿Õ“€//////////////////////////////////////////////////////////////////
//}///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const xy_t Window (GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN));

const int LongText = 200;
const int LongBigText = 2000;
const int LongBigBigText = 20000;

const double PI = 3.1415926535;

const int Nothing = -666;

//{///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////‘”Õ ÷»»////////////////////////////////////////////////////////////////////
//}///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool CreateMyWindow (vect_t window)
    {
    _txWindowStyle &= ~ WS_CAPTION;
    txTextCursor (false);

    txCreateWindow (window.x, window.y);
    }
    
double Dist (vect_t point1, vect_t point2)
    {
    return (sqrt (pow (point2.x - point1.x, 2) + pow (point2.y - point1.y, 2)));
    }
    
double Dist (double x1, double x2, double y1, double y2)
    {
    return (Dist (vect_t (x1, y1), vect_t (x2, y2)));
    }
    
bool Inside ()



























